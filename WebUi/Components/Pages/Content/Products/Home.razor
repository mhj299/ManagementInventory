@page "/app/home"
@using Application.DTO.Request.ActivityTracker
@using Microsoft.AspNetCore.SignalR.Client
@using NetcodeHub.Packages.UI.Templates.Breeze
@using System.Security.Claims
@using WebUi.Components.Pages.Content.General
@using WebUi.States.Administration
@inject GenericHomeHeaderState homeGenericState
@inject AdminActiveOrderCountState adminActiveOrderCountState
@rendermode InteractiveServer
@implements IDisposable
@attribute [Authorize]

<PageTitle>Home</PageTitle>


<HomeTemplate ActivateFooterTemplate=true
              ActivateHomeSection1Col9Template=true
             ActivateHomeSection1Col3Template="true">
             <HomeHeaderTemplate>
                
                 <AuthorizeView Policy="AdministrationPolicy">
                     <AdminHomeHeader/>
                 </AuthorizeView>
                 <AuthorizeView Policy="@Policy.UserPolicy">
                     <ClientHomeHeader/>
                 </AuthorizeView>

             </HomeHeaderTemplate>
             <HomeSection1Col9Template> <HomePageGraph</></HomeSection1Col9Template>
             <HomeSection1Col3Template><Banner/></HomeSection1Col3Template>
             <FooterTemplate> <Footer/></FooterTemplate>
         </HomeTemplate>

@code {
    [CascadingParamater] public Task <AutenticationState>? UserAuthState {get;set;}
    private HubConnection? hubConnection;
    protected async override Task OnInitializedAsync()
    {
        homeGenericState.StateChanged +=StateButtonClicked;
        hubConnection=netcodeHubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify",async(ClientId)=>
        {
            await  CallWhenNotified();
        });
        if(hubConnection==null)
            await hubConnection!.StartAsync();
    }
    /// <summary>
    /// reload page after first render to set all js active
    /// </summary>

    protected async override Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            string state=await localStorageService.GetEncryptedItemAsStringAsync("reload");
            if(string.IsNullOrEmpty(state))
            {
                await localStorageService.SaveEncyptedStringAsync("reload","false");
                NavManager.NavigateTo("app/home",true);

            }
            else
            {
                await localStorageService.DeleteItemAsync("reload");
            }
        }
    }
    async Task CallWhenNotified()
    {
        await InvokeAsync(async()=>
        {
            StateHasChanged();
            await adminActiveOrderCountState.GetActiveOrdersCount();
        });
    }
    void StateButtonClicked()
    {
        string adminOrderUrl="app/administration/products/orders";
        string clientOrderUrl="app/products/orders";
        if(!homeGenericState.IsAdmin)
            NavManager.NavigateTo($"{clientOrderUrl}/{homeGenericState.StateName}");
        else
            NavManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
    }


    public void Dispose()
    {
        homeGenericState.StateChanged -= StateButtonClicked;
    }
}
