@page "/app/products/manage"
@using NetcodeHub.Packages.UI.Templates.Breeze.TwoSectionsTemplate
@using NetcodeHub.Packages.UI.Templates.Breeze.TwoSectionsTemplate
@rendermode InteractiveServer
@attribute [Authorize(Policy="AdministrationPolicy")]



<PageTitle >Products</PageTitle>
<TwoSectionsTemplate>
    <Col12Template>
        <AdminHomeHeader/>
        <NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs" DesactivatedColor="@Color.Primary()" BackgroundColor="@BackgroundColor.Secondary" ActivatedColor="@Color.Dark()"/>
        <div class="row bg-primary py-2 mt-3" style="border-radius:20px">
            <div class="col-lg-12 col-sm-12 col-md-12">
                <div class="card border-1 shadow-lg" style="border-radius:20px">
                    <div class="card-header">
                        <button class="btn btn-outline-primary float-end" @onclick="CreateProductBtnClicked">
                            <i class="mdi mdi-plus"></i> Create Product
                        </button>
                    </div>
                    <div class="card-body border-1 border-primary">
                        <div class="mb-5">
                            <input type="search" class="form-control float-end w-25 mb-2 p-2 border-secondary" placeholder="Search name, desc,serial no." @onchange="SearchProduct">
                            <input />
                        </div>
                        <SfGrid DataSource="@PermanentProducts" AllowPaging="true" AllowSorting="true" AllowExcelExport="true" style="margin-top:35px ;"
                             AllowGrouping=true AllowPdfExport="true" Toolbar="ToolbarItems" AllowSelection="true" AllowResizing="true" @ref="DefaultGrid">
                             <GridPageSettings PageSize="5"></GridPageSettings>
                             <GridSelectionSettings Type="SelectionType.Single" Mode="SelectionMode.Both"></GridSelectionSettings>
                             <GridEvents OnToolbarClick="ToolbarClickHandler" TValue="GetProductResponseDTO" RowSelected="RowSelectHandler"></GridEvents>
                             <GridColumns>
                                 <GridColumn HeaderText="Image" AllowFiltering=false>
                                     <Template>
                                         @{
                                            var product = (context as GetProductResponseDTO);
                                            <div class="image">
                                                   <img  src="@(product!.Base64Image)" alt="@product.Name" width="70" height="50"/>
                                            </div>
                                        }
                                     </Template>

                                 </GridColumn>
                                 <GridColumn Field=@nameof(GetProductResponseDTO.DateAdded) HeaderText="Date" Format="d" Type="ColumnType.Date"></GridColumn>
                                 <GridColumn Field=@nameof(GetProductResponseDTO.Id) HeaderText="ID"></GridColumn>
                                 <GridColumn Field=@nameof(GetProductResponseDTO.Name) HeaderText="Name"></GridColumn>
                                 <GridColumn Field=@nameof(GetProductResponseDTO.SerialNumber) HeaderText="Serial No"></GridColumn>
                                 <GridColumn Field=@nameof(GetProductResponseDTO.Quantity) HeaderText="Quantity" Type="ColumnType.Integer"></GridColumn>
                                 <GridColumn HeaderText="Category" AllowFiltering=false>
                                     <Template>
                                         @{
                                            var product = (context as GetProductResponseDTO);
                                                <p>@(product!.Category.Name)</p>
                                         }
                                     </Template>
                                 </GridColumn>
                                 <GridColumn HeaderText="Location" AllowFiltering=false>
                                     <Template>
                                         @{
                                             var product =(context as GetProductResponseDTO);
                                             <p>@(product!.Location.Name</p>
                                         }
                                     </Template>
                                 </GridColumn>
                                 <GridColumn Field=@nameof(GetProductResponseDTO.Description) HeaderText="Description"></GridColumn>
                             </GridColumns>
                        </SfGrid>


                    </div>
              </div>
            </div>
        </div>
        <Modal @bind-Open="IsOpen"
                BootstrapClass="border-primary rounded p-2 ml-2"
                CustomStyle="@ModalCustomStyle">
                <ContentContent>
                @if (ShowProductPage)
                {
                    <div class="card border-1 shadow-sm">
                        <div class="card-border">
                           <i class="mdi mdi-folder-plus text-primary fs-4 px-3 menu-icon text-start"></i>
                           <span class="text-center text-primary fw-fold">@ModalTitle</span>
                            <i class="mdi mdi-close text-primary fw-bold float-end fs-4 curosrStyle "@onclick="CloseModal"></i>
                    </div>
                    <div class="card-body">
                          <EditForm Model="ProductModel" OnValidSubmit="SaveProduct" Enhance>
                               <DataAnnotationsValidator/>
                               <div class="form-group">
                                  <FloatingText Label class="Product Name" @bind-Value="ProductModel.Name" class="form-control"/>

                               </div>
                               <div class="form-group">
                                   <FloatingText Label="Product Serial Number" @bind-Value="ProductModel.SerialNumber" class="form-control"/>
                               
                               </div>
                               <div class="form-group mt-3">
                                  <FloatingNumber Label="Product Quantity" @bind-Value="ProductModel.Quantity" class="form-control w-100"/>

                               </div>
                               <div class="form-group">
                                 <FloatingTextArea Label="Product Description" @bind-Value="ProductModel.Description" class="form-control w-100"/>

                               </div>
                               <div class="form-group mt-0">
                                 <NetcodeHubFileUpload @ref="FileUploadComponent" Notify="RetrieveContent"RequiredExtensions="RequiredEx"/>

                               </div>
                               
                               <div class="form-group mt-0">
                                   <Label class="form-label">Select Category</Label>
                                   <select class="form-select mb-3" @onchange="CategorySelectionChanged">
                                     @if (Categories!=null)
                                        {
                                            @if(SelectedProduct.Id !=Guid.Empty)
                                            {
                                                <option value="@SelectProduct CategoryId">@SelectProduct.Category.Name</option>
                                            }
                                            else
                                            {
                                                <option>Select Category</option>
                                            }
                                            foreach(var cat in Categories)
                                            {
                                                if(SelectedProduct.CategoryId !=cat.Id)
                                                {
                                                    <option value="@cat.Id">@cat.Name</option>
                                                }
                                            }
                                        }
                                    </select>
                               </div>
                               <div class="form-control"> 
                                  <Label class="form-label">Select Location</Label>
                                  <select class="form-select mb-3" @onchange="LocationSelectionChanged">
                                     @if(Locations !=null)
                                        {
                                            @if(SelectedProduct.Id !=Guid.Empty)
                                            {
                                                <option value="@SelectedProduct.LocationId">@SelectProduct.Location.Name</option>
                                            }else
                                            {
                                                <option> Select Location</option>
                                            }
                                            foreach (var loc in Locations)
                                            {
                                                if(SelectedProduct.LocationId!= loc.Id)
                                                {
                                                    <option value="@loc.Id">@loc.Name</option>
                                                }

                                            }
                                        }
                                    </select>
                               
                               </div>
                               <div class="form-group mt-3">
                                 @if(Loading)
                                    {
                                        <GenericSpinnerButton Text="Saving Porduct...."  ButtonClass=" btn btn-primary"/>
                                    }
                                    else
                                    {
                                        @if(ProductModel.Base64Image != null)
                                        {
                                            <img width="50" height="50" style="border-radius:100%" src="@ProductModel.Base64Image"  class="float-start"/> 
                                            
                                        }
                                        <button type="submit" class="btn btn-outline-primary float-end"><Save Peoduct</button>
                                    }
                                </div>
                                <div class="form-group mt-3">
                                  @if(Errors !="")
                                    {
                                        @Errors
                                    }
                                    else
                                    {
                                        <ValidationSummary/>
                                    }
                                </div>


                    </EditForm>
                    </div>
                    </div>
                }
                @if (ShowConfirmationPage)
                {
                    <div class="card">
                      <div class="card-header d-flex justify-content-between">
                        <i class="d-flex mdi mdi-delete-sweep text-danger fs-4 px-3 menu-icon text-start"></i>
                        <span class="d-flex text-center text-danger fw-bold">Confirm Product Deletion</span>
                        <i class="d-flex mdi mdi-close text-danger fw-bold float-end fs-4 cursorStyle" @onclick="CloseModal"></i>
                      </div>
                      <div class="card-body">Are you sure you want to delete this product</div>
                      <div class="card-footer">
                         @if(Loading)
                            {
                                <GenericSpinnerButton contextmenu="Deleting ..." ButtonClass="btn btn-danger"/>
                            } else
                            {
                                <button class="btn btn-danger float-end" type="button" onclick="ConfirmDelete">
                                  <i class="mdi mdi-delete"></i>
                                  Confirm
                                </button>
                            }
                        </div>
                    </div>
                }

            </ContentContent>
                
         </Modal>
    </Col12Template>
    <FooterTemplate> <Footer/> </FooterTemplate>
</TwoSectionsTemplate>

<NetcodeHubToast @ref="ToastComponent"/>

    @code {
    string ModalTitle ="New Product";
    private SfGrid<GetProductResponseDTO>? DefaultGrid;
    NetcodeHubToast? ToastComponent;
    string ModalCustomStyle=string.Empty;
    string Search=string.Empty;
    List<string> RequiredEx=[".jpg",".png"];
    NetcodeHubFileUpload? FileUploadComponent;
    string Errors="";
    private bool ShowProductpage;
    private bool ShowConfirmationPage;
    private Dictionary<string, string> BreadCrumbs = new Dictionary<string, string>
     {
            {"Home","app/home"},
            {"Manage ¨Products",null!}
    };
    private List<ItemModel> Toolbaritems=new List<ItemModel>();


    public bool Loading{get;set;}=false;
    public int Duration{ get; set; }
    public bool IsOpen {get;set;}
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState{get;set;}
    private IEnumerable<GetProductResponseDTO>Products {get;set;}=[]
    private IEnumerable<GetProductResponseDTO>PermanentProducts{get;set;}=[]
    private IEnumerable<GetCategoryResponseDTO>Categories{get;set;}=[]
    private IEnumerable<GetLocationResponseDTO> Locations {get;set}=[]

     private AddProductRequestDTO ProductModel {get;set;}=new();
         ClaimsPrincipal? User;
    private HubConnection? hubConnection;
    bool CanDelete=false;
    protected async override Task OnInitializedAsync()
        {
        User=(await UserAuthState!).User;
        CanDelete=customAuthorizationService.CustomClaimChecker(User,DefaultClaims.Delete);
        homeGenericState.StateChanged+=StateButtonClicked;
        await GetDefault();
        LoadToolbarItems();

        hubConnection=netcodehubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify",async(clientId)=>
        {
               await CallWhenNotified();
        });
        if(hubConnection==null)
            await hubConnection!.StartAsync();
    }
    async Task CallWhenNotified()
        {
        await InvokeAsync(async()=>
         {
             StateHasChanged();
             await asminState.GetActiveOrdersCount();
    } ); 
    }


    ///Navigate to order pages when state buttons are clicked

    void StateButtonClicked()
    {
        string adminOrderUrl="app/administration/products/orders";
        if(homeGenericState.IsAdmin)
            NavManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");

    }

    private async Task GetDefault()
    {
        await GetProducts();
        await GetCategories();
        await GetLocations();
    }

    //get categories

    async Task GetCategories()
    {
        using var scope=serviceProvider.CreateScope();
        var mediator=scope.ServiceProvider.GetRequiredService<IMediator>();
        var result=await mediator.Send(new GetAllCategoriesQuery());
        Categories=result;
    }

    //get locations

    async Task GetLocations()
    {
        using var scope=serviceProvider.CreateScope();
        var mediator=scope.ServiceProvider.GetRequiredService<IMediator>();
         var result=await mediator.Send(new GetAllLocationsQuery());
        Locations=result;
    }
    //get products


    async Task GetProducts()
     {
        using var scope=serviceProvider.CreateScope();
        var mediator=scope.ServiceProvider.GetRequiredService<IMediator>();
        var result = await mediator.Send(new GetAllProductsQuery());
        Products = result;
        PermanentProducts = Products;

    }

    void LoadToolbarItems()
      {
        if(CanDelete)
         {
            ToolbarItems.Add(new ItemModel() {Text="Delete",TooltipText="Delete Product",PrefixIcon="e-trash"});

        }
        ToolbarItems.Add(new ItemModel() {Text="View",TooltipText="View Product",PrefixIcon="e-eye"});
        ToolbarItems.Add(new ItemModel() {Text="Edit",TooltipText="Edit Product",PrefixIcon="e-edit"});
        ToolbarItems.Add(new ItemModel() {Text="PDF",TooltipText="Export to Pdf",PrefixIcon="e-icons e-export-pdf"});
        ToolbarItems.Add(new ItemModel() {Text="EXCEL",TooltipText="Export to Excel",PrefixIcon="e-icons e-exort-xls"});
        ToolbarItems.Add(new ItemModel() {Text="Print",TooltipText="Print",PrefixIcon="e-print"});
    }
    void OpenModal()=>IsOpen=true;

    void CreateProductBtnClicked()
     {
        ModalTitle="New Product";
        ResetModalDisplay();
        ModalCustomStyle="position:relative;left:45vw;top:10vh; min-width:250px";
        ShowProductPage=true;
        ProductModel=new();
        OpenModal();

    }

    void CloseModal()=>IsOpen=false;

    private Guid IdHolder{get;set;}=Guid.Empty;

    async Task SaveProducts()
        {
        Loading=true;
        await Task.Delay(3000);
        SerivceResponse response=new(false,null);
        if(IdHolder != Guid.Empty)
            {
            var update =ProductModel.Adapt(new UpdateProductRequestDTO());
            update.Id=IdHolder;
            using var scope=serviceProvider.CreateScope();
            var mediator=scope.ServiceProvider.GetRequiredService<IMdiator>();
            response= mediator.Send(new UpdateProductCommand(update));
            await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
                {
                UserId=User!.Claims.FirstOrDefault(c=>c.Type==ClaimTypes.NameIdentifier)!.Value.ToString(),
                Title="Update Product method called",
                Description=response.Message,
                OperationState=response.Flag,
                Date=DateTime.Now.Date
            });

            Loading=false;
            StateHasChanged();


        }
        else
            {
            using var scope=serviceProvider.CreateScope();
            var mediator=scope.ServiceProvider.GetRequiredService<IMediator>();
            response=await mediator.Send(new CreateProductCommand(ProductModel));
            await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
                {
                UserId=User!.Claims.FirstOrDefault( c => c.Type==ClaimTypes.NameIdentifier)!.Value.ToString(),
                Title="Update Product method called",
                Description=response.Message,
                OperationState=response.Flag,
                Date=DateTime.Now.Date

        });

        }

        if(response.Flag)
            {
            CloseModal();
            await GetProducts();
            PermanentProducts = Products;
            await ToastComponent!.ShowSuccessToast("Info",response.Message);
            ProductModel=new();
            SelectedProduct=new();

        } else
            {
            await ToastComponent!.ShowErrorToast("Alert",response.Message);
        }
        Loading=false;



    }
    void RetrieveContent(FileModel? incomingFiles )
        {
        if(incomingFiles is null) return;
        foreach (var file in incomingFiles!.IBrowserFiles!)
            {
            var getFileNameAndBase64=incomingFiles.BaseFiles!.FirstOrDefault(_=>_.key.Equals(file.Name, StringComparison.OrdinalIgnoreCase));
            if(getFileNameAndBase64.key!=null)
                ProductModel.Base64Image=getFileNameandBase64.Value;


    }
    }
    void CategorySelectionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)=>ProductModel.CategoryId=Guid.Parse(e.Value!.ToString()!);
    void LocationsSelectionChanged(Microsoft.AspNetCore.Components.ChangeEventArgs e)=>ProductModel.LocationId=Guid.Parse(e.Value!.ToString()!);
    async Task ToolbarClickHandler(Syncfusion.Blazor.Navigations.ClickEventArgs args)
        {
        if(args.Ite m. Text.ToLower()=="excel")
       await this.DefaultGrid!.ExportToExcelAsync();


      else if(args.Ite m. Text.ToLower()=="pdf")
      await this.DefaultGrid!.ExportToPdfAsync();

    else if (args.Ite m. Text.ToLower()=="view")
     {
            bool check= await checkIfRowSelected();
                if(check)
                NavManager.NavigateTo($"app/products/details/{SelectedProduct.Id.ToString()}");

      }
      else if(args.Item.Text.ToLower() == "add")
       {
            ProductModel=new();
            OpenModal();
        }
        else if (args.Item.Text.ToLower() =="edit")
            {
          bool check=await CheckIRowSelected();  
            if(check)
                {
                ResetModalDisplay();
                ModalCustomStyle="position:relative; left:45vw;top:10vh; min-width:250px";
                ModalTitle="update Product";
                SelectedProduct.Adapt(ProductModel);
                IdHolder=SelectedProduct.Id;
                ShowProductPage=true;
                OpenModal();
        } 
        }
        else if(args.Item.Text.ToLower()=="delete")
            {
            if(await CheckIfRowSelected())
                {  
                ResetModalDisplay();
                ModalCustomStyle="position:relative; left:40vw ; top:45vh;";
                ShowConfirmationPage=true;
                OpenModal();


    }
    }
    }
    async Task ConfirmationDelete()
        {
        Loading=true;
        await Task.Delay(3000);
        using var scope=serviceProvider.CreateScope();
        var mediator=scope.ServiceProvider.GetRequiredService<IMediator>();
        var result= await mediator.Send(new DeleteProductCommand(SelectedProduct.Id));
        await accountService.SaveActivityAsync(new ActivityTrakcerRequestDTO()
        {
            UserId = User!.Claims.FirstOrDefault(c=>c.Type==ClaimTypes.NameIdentifier)!.Value.ToSStirng(),
            Title = "Delete Product method called",
            Description = result.Message,
            OperationState = result.Flag,
            Date = DateTime.Now.Date
        });
        if(result.Flag)
            {
            await GetProduct();
            PermanentProducts=Products;
            await ToastComponent!.ShowSuccessToast("Info", result.Message);
            SelectedProduct = new();
            CloseModal();

        }
        else
            { 
            await ToastComponent!.ShowErrorToast("Alert",result.Message);


        }
        Loading=false;
    }
    async Task<bool> CheckIfRowSelected()
        {
        if(SelectedProduct.Id==Guid.Empty)
            {
            Duration=2000;
            await ToastComponent!.ShowErr orToast("Alert","No row selected");
            return false;
        }
        return true;
         }

    private GetProductResponseDTO SelectedProduct=new();
    public void RowSelectedHandler(RowSelectEventArgs<GetProductResponseDTO> args)=>SelectProduct=args.Data;


    void SearchProduct(Microsoft.AspNetCore.Components.ChangeEventArgs e)
        {
        try
            {
            string trimFilter=e.Value!.ToString()!.Trim();
            PermanentProducts=Products
            .where(_ => _.Name.Contains(trimFilter, StringComparison.OrdinalIgnoreCase)||
            _.SerialNumber.Contains(trimFilter.StringComparison.OrdinalIgnoreCase)||
            _.Description.Conyains(trimFilter.StringComparison.OrdinaIgnoreCase)||
            _.SerialNumber.Contains(trimFilter.StringComaparison.OrdinalIgnoreCase)
            ).ToList();
        }
        catch
        {
            PermanentProducts= null ;

        }

    }
    private void ResetModalDisplay()
      {

        ShowProductPage=false;
        ShowConfirmationPage=false;
        ModalCustomStyle=string.Empty;      }
 
       public void Dispose() => homeGenericState.StateChanged -= StateButtonClicked;

    }



