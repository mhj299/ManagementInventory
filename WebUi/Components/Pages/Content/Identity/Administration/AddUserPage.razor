@page "/administration/account/create-user"
@rendermode InteractiveServer
@implements IDisposable

<PageTitle>Add User</PageTitle>



    <ThreeSectionsTemplate>
        <Col9Template>
            <AdminHomeHeader />
            <NetcodeHubBreadCrumb BreadCrumbs="BreadCrumbs" BackgroundColor="@BreadCrumbBackgroundColor.InfoSubtle()" />
            <div class="card col-xl-10 col-lg-12 bg-light shadow-lg border-0 mt-3" style="border-radius:24px">
                <div class="card-body bg-light">
                    <EditForm Model="UserModel"OnValidSubmit="RegisterAsync">
                        <div class="card border-success bg-light shadow-lg text-dark"style="opacity:0.8; border-radius:24px">
                            <div class="card-header text-dark fs-4 border-primary text-center">
                                <i class="mdi mdi-account-plus menu-icon float-start text-success"></i>
                                <span style="font-family:Algerian;letter-spacing:2px"class="fw-bold text-success">Add New User</span>
                                <button type="reset" class="btn-outline-danger btn-sm float-end">Reset</button>
                            </div>
                            <div class="card-body p-3 "style="opacity:1">
                                <DataAnnotationsValidator/>
                                <FloatingText class="form-control mb-3"Label="Full Name" Placeholder="John"@bind-Value="UserModel.Name"/>
                                <FloatingText class="form-control" mb-3 Label="Email Address"Placeholder="Ahlemmhj@gmail.com"@bind-Value="UserModel.Email"/>

                                <InputSelect @bind-Value="AddUserPage.Policy" class="form-select mb-3">
                                    <option>Select Policy</option>
                                @foreach (var policy in Policies!)
                                {
                                    <option value="@policy">@policy</option>
                                }
                            </InputSelect>
                            <FloatingText Label="User Password" Type="@passwordState.PasswordType" class="form-control" @bind-Value="UserModel.Password"/>
                            <FloatingText Label="Confirm password"Type="@passwordState.PasswordType" class="form-control" @bind-Value="ConfirmPassword"/>
                            <a class="btn btn-link text-decoration-none float-end " style="margin-top:-20px"@onclick="ChangePasswordType" ><small>@passwordState.DisplayText</small></a>
                            <div class="form-group align-content-end">
                                @if(Loading){
                                    <GenericSpinnerButton ButtonClass="btn btn-success w-50 mt-4 float-end" Text="Creating Account...."/>

                                }else{
                                    <button class="float-end btn btn-success mt-4 w-50" type="submit">Create User</button>
                                }
                            </div>
                            <hr class="text-primary"/>

                            </div>
                            <div class="card-footer mt-5">
                                <ValidationSummary class="form-control text-danger text-decroration-none p-4" style="list-style:lower-latin;text-align:left"/>
                            </div>
                        </div>
                    </EditForm>
                </div>
            </div>
        </Col9Template>
        <Col3Template><Banner/></Col3Template>
        <FooterTemplate><Footer/></FooterTemplate>
    </ThreeSectionsTemplate>
    <NetcodeHubToast @ref="ToastComponent"Duration="4000"/>
@code {
    private Dictionnary <string ,string > BreadCrumbs =new Dictionnary<string,string>
    {
        {"Home","app/home"},
        {"Add New User",null!}
    };
    [CascadingParameter] public Task<AuthenticationState>? UserAuthState{get; set;}
    private CreateUserRequestDTO UserModel {get; set;} =new();
    NetcodeHubToast? ToastComponent;
    private bool Loading =false;
    List<string> Policies = new List<string>()
    {
        new string (Policy.AdminPolicy),
        new string (Policy.ManagerPolicy),
        new string (Policy.UserPolicy),
    };

    private HubConnection? hubConnection;
    private async Task RegisterAsync()
    {
        Loading = true;
        await Task.Delay(3000);
        var response =await accountService.CreateUserAsync(UserModel);
        await accountService.SaveActivityAsync(new ActivityTrackerRequestDTO()
            {
                UserId = (await UserAuthState!).User.Claims.FirstOrDefault(c => c.Type == ClaimTypes.NameIdentifier)!.Value.ToString,
                Title = "Create new User method called",
                Description = response.Message,
                OperationState = response.Flag,
                Date = DateTime.Now.Date

            });
        if (reponse.Flag)
        {
            await ToastComponent!.ShowSuccessToast("Info", response.Message);
            UserModel=new();

        }
        else
        {
            await ToastComponent!.ShowErrorToast("Alert", response.Message);
        }
        Loading = false;


    }
    protected async override Task OnInitializedAsync()
    {
        if (!customAuthorizationService.CustomClaimChecker((await UserAuthState!).User, DefaultClaims.ManageUser))
            NavManager.NavigateTo("Account/Access-Denied");
        passwordState.Changed+=StateHasChanged;
        homeGenericState.StateChanged+=StateButtonClicked;

        hubConnection=netcodeHubConnectionService.GetHubConnection();
        hubConnection.On<string>("Notify", async (clientId) =>
        {
            await CallWhenNotified();
        });
        if (hubConnection == null)
            await hubConnection!.StartAsync();

    }
    async Task CallWhenNotified()
    {
        await InvokeAsync(async () =>
        {
            StateHasChanged();
            await adminActiveOrderCountState.GetActiveOrdersCount();
        });
    }
    ///  <summary>
    /// Navigate to  order pages when state buttons are clicked
    /// 
    /// </summary>

    void StateButtonClicked()
    {
        stringadminOrderUrl = "/app/administration/products/orders";
        if (homeGenericState.IsAdmin)
            NavManager.NavigateTo($"{adminOrderUrl}/{homeGenericState.StateName}");
    }
    void ChangePasswordType()=> passwordState.ChangePasswordType();
    public void Dispose()
    {
        homeGenericState.StateChanged-=StateButtonClicked;
        passwordState.Changed -= StateHasChanged;
    }
}
